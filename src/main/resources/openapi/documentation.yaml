openapi: "3.0.3"
info:
  title: "coffee_talk API"
  description: "coffee_talk API"
  version: "1.0.0"
servers:
- url: "https://coffee_talk"
paths:
  /callback:
    get:
      description: ""
      responses:
        "200":
          description: "OK <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "/hello"
  /login:
    get:
      description: ""
      responses:
        "200":
          description: "OK <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "/callback"
  /protected/route/basic:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /protected/route/form:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /metrics-micrometer:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /cities:
    post:
      description: "Create city"
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
  /cities/{id}:
    delete:
      description: "Delete city"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: "Read city"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/City"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: "Update city"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /ws:
    get:
      description: ""
      parameters:
      - name: "Connection"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "Upgrade"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "Sec-WebSocket-Key"
        in: "header"
        required: true
        schema:
          type: "string"
      responses:
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: "string"
            Upgrade:
              required: true
              schema:
                type: "string"
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: "string"
  /json/kotlinx-serialization:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map"
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
components:
  schemas:
    City:
      type: "object"
      properties:
        name:
          type: "string"
        population:
          type: "integer"
          format: "int32"
    Map:
      type: "object"
      properties: {}